#!/usr/bin/env node

const fs = require("fs-extra");
const path = require("path");
const StoryGenerator = require("./generate-story.js");

/**
 * Multi-Agent Sistemi i√ßin Otomatik Story Olu≈üturucu
 *
 * Bu script, Developer Agent tarafƒ±ndan olu≈üturulan
 * atomic design componentleri i√ßin otomatik olarak story dosyalarƒ± olu≈üturur.
 */

class AutoStoryGenerator {
  constructor() {
    this.storyGenerator = new StoryGenerator();
    this.watchedPaths = [
      "src/components/atoms",
      "src/components/molecules",
      "src/components/organisms",
      "src/components/templates",
      "src/components/pages",
      "components/atoms",
      "components/molecules",
      "components/organisms",
      "components/templates",
      "components/pages",
    ];
  }

  /**
   * Yeni olu≈üturulan component i√ßin story dosyasƒ± olu≈ütur
   */
  async generateStoryForNewComponent(componentPath) {
    try {
      console.log(`üéØ Yeni component algƒ±landƒ±: ${componentPath}`);

      if (!(await fs.pathExists(componentPath))) {
        console.log(`‚ö†Ô∏è Component dosyasƒ± bulunamadƒ±: ${componentPath}`);
        return;
      }

      const storyPath = this.storyGenerator.getStoryPath(componentPath);
      if (await fs.pathExists(storyPath)) {
        console.log(`‚ÑπÔ∏è Story dosyasƒ± zaten mevcut: ${storyPath}`);
        return;
      }

      await this.storyGenerator.generateStory(componentPath);
      console.log(`‚úÖ Story dosyasƒ± otomatik olu≈üturuldu: ${storyPath}`);

      await this.logStoryGeneration(componentPath, storyPath);
    } catch (error) {
      console.error(`‚ùå Otomatik story olu≈üturma hatasƒ±:`, error.message);
    }
  }

  /**
   * G√ºncellenen component i√ßin story dosyasƒ±nƒ± g√ºncelle
   */
  async updateStoryForComponent(componentPath) {
    try {
      console.log(`üîÑ Component g√ºncellendi: ${componentPath}`);

      const storyPath = this.storyGenerator.getStoryPath(componentPath);

      if (!(await fs.pathExists(storyPath))) {
        await this.generateStoryForNewComponent(componentPath);
        return;
      }

      await this.storyGenerator.generateStory(componentPath);
      console.log(`‚úÖ Story dosyasƒ± g√ºncellendi: ${storyPath}`);

      await this.logStoryUpdate(componentPath, storyPath);
    } catch (error) {
      console.error(`‚ùå Story g√ºncelleme hatasƒ±:`, error.message);
    }
  }

  /**
   * Klas√∂rdeki t√ºm componentler i√ßin story olu≈ütur
   */
  async generateStoriesForDirectory(dirPath) {
    try {
      console.log(`üìÅ Klas√∂r taranƒ±yor: ${dirPath}`);

      if (!(await fs.pathExists(dirPath))) {
        console.log(`‚ö†Ô∏è Klas√∂r bulunamadƒ±: ${dirPath}`);
        return;
      }

      const files = await fs.readdir(dirPath);
      const componentFiles = files.filter(
        (file) => file.endsWith(".tsx") || file.endsWith(".jsx")
      );

      console.log(`üìä ${componentFiles.length} component bulundu`);

      for (const file of componentFiles) {
        const componentPath = path.join(dirPath, file);
        await this.generateStoryForNewComponent(componentPath);
      }

      console.log(`‚úÖ T√ºm story dosyalarƒ± olu≈üturuldu`);
    } catch (error) {
      console.error(`‚ùå Klas√∂r story olu≈üturma hatasƒ±:`, error.message);
    }
  }

  /**
   * T√ºm watched path'lerdeki story'leri olu≈ütur
   */
  async generateAllStories() {
    console.log(`üöÄ T√ºm story dosyalarƒ± olu≈üturuluyor...`);

    for (const watchedPath of this.watchedPaths) {
      if (await fs.pathExists(watchedPath)) {
        await this.generateStoriesForDirectory(watchedPath);
      }
    }

    console.log(`‚úÖ T√ºm story dosyalarƒ± olu≈üturuldu`);
  }

  /**
   * Story generation log dosyasƒ±na kaydet
   */
  async logStoryGeneration(componentPath, storyPath) {
    try {
      const logEntry = {
        timestamp: new Date().toISOString(),
        event: "story_generated",
        component_path: componentPath,
        story_path: storyPath,
        agent: "auto-story-generator",
      };

      const logPath = path.join(
        __dirname,
        "../shared/logs/story-generation.log"
      );
      await fs.appendFile(logPath, JSON.stringify(logEntry) + "\n");
    } catch (error) {
      console.error("Log yazma hatasƒ±:", error.message);
    }
  }

  /**
   * Story update log dosyasƒ±na kaydet
   */
  async logStoryUpdate(componentPath, storyPath) {
    try {
      const logEntry = {
        timestamp: new Date().toISOString(),
        event: "story_updated",
        component_path: componentPath,
        story_path: storyPath,
        agent: "auto-story-generator",
      };

      const logPath = path.join(
        __dirname,
        "../shared/logs/story-generation.log"
      );
      await fs.appendFile(logPath, JSON.stringify(logEntry) + "\n");
    } catch (error) {
      console.error("Log yazma hatasƒ±:", error.message);
    }
  }

  /**
   * Component olu≈üturulduƒüunda √ßaƒürƒ±lƒ±r
   */
  async onComponentCreated(componentPath) {
    await this.generateStoryForNewComponent(componentPath);
  }

  /**
   * Component g√ºncellendiƒüinde √ßaƒürƒ±lƒ±r
   */
  async onComponentUpdated(componentPath) {
    await this.updateStoryForComponent(componentPath);
  }
}

// CLI kullanƒ±mƒ±
if (require.main === module) {
  const generator = new AutoStoryGenerator();
  const args = process.argv.slice(2);

  if (args.includes("--all")) {
    generator.generateAllStories();
  } else if (
    args.includes("--component") &&
    args[args.indexOf("--component") + 1]
  ) {
    const componentPath = args[args.indexOf("--component") + 1];
    generator.generateStoryForNewComponent(componentPath);
  } else if (args.includes("--update") && args[args.indexOf("--update") + 1]) {
    const componentPath = args[args.indexOf("--update") + 1];
    generator.updateStoryForComponent(componentPath);
  } else {
    console.log("Kullanƒ±m:");
    console.log(
      "  node auto-story-generator.js --all                    # T√ºm story'leri olu≈ütur"
    );
    console.log(
      "  node auto-story-generator.js --component <path>       # Tek component i√ßin story olu≈ütur"
    );
    console.log(
      "  node auto-story-generator.js --update <path>          # Story g√ºncelle"
    );
  }
}

module.exports = AutoStoryGenerator;
