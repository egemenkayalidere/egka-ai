{
  "name": "Developer Agent Context Injection",
  "version": "1.0.0",
  "description": "Context injection mechanism for Developer Agent - Automatically loaded at startup",
  "type": "context_injection",
  "injection_config": {
    "target_agent": "developer_agent",
    "auto_load": true,
    "priority": "high",
    "load_order": 1,
    "persistent": true,
    "refresh_interval": 0
  },
  "context_data": {
    "global_settings": {
      "default_language": "typescript",
      "code_style": "prettier",
      "linting_rules": "eslint",
      "testing_framework": "jest",
      "documentation_format": "markdown"
    },
    "project_configs": {
      "universal_ui_rules": {
        "architecture": "atomic_design_with_modules",
        "component_structure": "hierarchical",
        "state_management": "zustand",
        "ui_library": "material_ui",
        "code_organization": "modular"
      },
      "supported_frameworks": {
        "react": {
          "ui_library": "material_ui",
          "state_management": "zustand",
          "routing": "react_router"
        },
        "react_native": {
          "ui_library": "react_native_paper",
          "state_management": "zustand",
          "navigation": "react_navigation"
        },
        "nextjs": {
          "ui_library": "material_ui",
          "state_management": "zustand",
          "routing": "next_router"
        }
      }
    },
    "development_workflow": {
      "ui_development": {
        "atomic_design_approach": true,
        "material_ui_integration": true,
        "component_structure_validation": true,
        "responsive_design": true
      },
      "module_development": {
        "zustand_store_creation": true,
        "api_service_integration": true,
        "business_logic_separation": true,
        "domain_isolation": true
      },
      "code_quality": {
        "typescript_strict": true,
        "eslint_rules": "strict",
        "prettier_formatting": true,
        "component_testing": true
      }
    },
    "ui_architecture": {
      "atomic_design": {
        "atoms": {
          "description": "Material UI veya HTML elementlerinden türetilen en küçük bileşenlerdir.",
          "examples": ["CustomButton", "CustomTextField", "CustomIcon"],
          "location": "components/atoms",
          "rules": [
            "Material UI veya HTML elementlerinden türetilmeli",
            "Tek bir işlevi olmalı",
            "Yeniden kullanılabilir olmalı"
          ]
        },
        "molecules": {
          "description": "İki veya daha fazla atomun birleşimiyle oluşan, genellikle tek bir amaca hizmet eden bileşenlerdir.",
          "examples": ["InputWithLabel", "AvatarWithName", "FormField"],
          "location": "components/molecules",
          "rules": [
            "İki veya daha fazla atom içermeli",
            "Tek bir amaca hizmet etmeli",
            "Kendi state'i olmamalı"
          ]
        },
        "organisms": {
          "description": "Birden fazla molecule ve atomun birleşiminden oluşan, genellikle bir sayfa parçasını temsil eden büyük bileşenlerdir.",
          "examples": ["Sidebar", "Navbar", "ProfileCard"],
          "location": "components/organisms",
          "rules": [
            "Birden fazla molecule ve atom içermeli",
            "Sayfa parçasını temsil etmeli",
            "Store bağlantısı olabilir ancak kendi store'unu üretmemeli",
            "İş mantığı içermemeli"
          ],
          "note": "Store bağlantısı olabilir ancak kendi store'unu üretmez."
        },
        "templates": {
          "description": "Organizmaların sayfa düzeyinde birleşimidir. Layout ve şablonları ifade eder.",
          "examples": ["MasterPage", "DashboardLayout"],
          "location": "components/templates",
          "rules": [
            "Layout ve şablonları ifade etmeli",
            "Organizmaları birleştirmeli",
            "Sayfa düzeyinde yapı oluşturmalı"
          ]
        }
      },
      "modules": {
        "description": "Bir domain'e özel tüm iş mantığını, store ve API katmanlarını ve UI bileşenlerini içeren bağımsız yapılar.",
        "examples": ["UserModule", "AuthModule", "NotificationModule"],
        "location": "modules/*",
        "structure": ["store.ts", "services.ts", "UI component(s)"],
        "rules": [
          "Kendi iş mantığını üretmeli",
          "Store ve API çağrılarını içermeli",
          "Domain'e özel olmalı",
          "Bağımsız çalışabilmeli"
        ],
        "note": "Kendi iş mantığını üretir, store ve api çağrılarını içerir."
      },
      "differences": {
        "organism_vs_module": {
          "organism": {
            "focus": "UI yapı",
            "owns_store": false,
            "layer": "components/organisms",
            "business_logic": false
          },
          "module": {
            "focus": "iş mantığı + UI + state",
            "owns_store": true,
            "layer": "modules/*",
            "business_logic": true
          }
        }
      },
      "file_structure": {
        "components": {
          "atoms": "components/atoms",
          "molecules": "components/molecules",
          "organisms": "components/organisms",
          "templates": "components/templates"
        },
        "modules": "modules/*",
        "shared": {
          "utils": "shared/utils",
          "types": "shared/types",
          "constants": "shared/constants"
        }
      },
      "state_management": {
        "zustand": {
          "store_location": "modules/*/store.ts",
          "naming": "use[ModuleName]Store",
          "structure": {
            "state": "interface",
            "actions": "functions",
            "selectors": "computed values"
          }
        },
        "api_services": {
          "location": "modules/*/services.ts",
          "naming": "[ModuleName]Service",
          "structure": {
            "api_calls": "async functions",
            "error_handling": "try-catch blocks",
            "type_definitions": "interfaces"
          }
        }
      },
      "material_ui_integration": {
        "theme_usage": "required",
        "component_wrapping": "required",
        "customization": "theme-based",
        "responsive_design": "required"
      },
      "rules": [
        "Atomlar components/atoms altında tanımlanmalı.",
        "Moleküller components/molecules içinde olmalı.",
        "Organizmalar components/organisms altında bulunmalı.",
        "Layout ve şablonlar components/templates içinde olmalı.",
        "Domain bazlı state ve logic 'modules/' klasöründe olmalı.",
        "Zustand için store.ts, API işlemleri için services.ts kullanılmalı.",
        "Tüm bileşenler MUI temasıyla uyumlu olmalı.",
        "Tüm context ve işlem logları kayıt altına alınmalı."
      ],
      "must_apply_rules": [
        "context7 must be loaded before task execution.",
        "All component structures must follow the atomic design layer.",
        "Modules must define their own Zustand store and API layer.",
        "Organisms must not contain business logic or create their own stores.",
        "Agent must reject any task execution if context7 is not injected."
      ]
    }
  },
  "injection_hooks": {
    "pre_execution": [
      "load_context_injection",
      "validate_context_data",
      "merge_with_existing_context"
    ],
    "post_execution": [
      "save_context_state",
      "update_injection_log",
      "cleanup_temporary_data"
    ]
  },
  "monitoring": {
    "injection_metrics": [
      "load_time",
      "context_size",
      "merge_conflicts",
      "validation_errors"
    ],
    "performance_impact": ["startup_time", "memory_usage", "execution_overhead"]
  }
}
