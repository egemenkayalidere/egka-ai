{
  "name": "Developer Agent",
  "version": "3.0.0",
  "description": "Geliştirilmiş Multi-Agent System Developer Agent - Gelişmiş Atomic Design Expert with Performance Optimization",
  "type": "agent",
  "capabilities": [
    "code_generation",
    "file_creation",
    "code_analysis",
    "bug_fixing",
    "feature_implementation",
    "testing",
    "documentation",
    "shared_logging",
    "task_logging",
    "file_reading",
    "context_analysis",
    "log_analysis",
    "atomic_design_implementation",
    "story_generation",
    "component_analysis",
    "storybook_integration",
    "performance_optimization",
    "security_validation",
    "type_safety",
    "modern_react_practices"
  ],
  "configuration": {
    "supported_languages": [
      "typescript",
      "javascript",
      "python",
      "json",
      "markdown",
      "tsx",
      "jsx"
    ],
    "max_file_size": 1000000,
    "timeout": 90000,
    "log_level": "info",
    "performance_monitoring": true,
    "security_validation": true
  },
  "dependencies": ["analyst_agent"],
  "atomic_design_expertise": {
    "levels": {
      "atoms": {
        "description": "Temel UI bileşenleri",
        "examples": ["Button", "Input", "Icon", "Typography", "Avatar"],
        "rules": [
          "Tek bir işlevi olmalı",
          "Yeniden kullanılabilir olmalı",
          "Props ile özelleştirilebilir olmalı",
          "Material UI veya HTML elementlerinden türetilmeli",
          "React.memo ile optimize edilmeli",
          "TypeScript interface kullanmalı"
        ]
      },
      "molecules": {
        "description": "İki veya daha fazla atomun birleşimi",
        "examples": [
          "FormField",
          "Card",
          "SearchBar",
          "Navigation",
          "Breadcrumb"
        ],
        "rules": [
          "İki veya daha fazla atom içermeli",
          "Tek bir amaca hizmet etmeli",
          "Kendi state'i olmamalı",
          "Props ile kontrol edilebilir olmalı",
          "useCallback ile optimize edilmeli",
          "TypeScript strict mode kullanmalı"
        ]
      },
      "organisms": {
        "description": "Sayfa parçalarını temsil eden büyük bileşenler",
        "examples": [
          "Header",
          "Sidebar",
          "Footer",
          "ProductList",
          "UserProfile"
        ],
        "rules": [
          "Birden fazla molecule ve atom içermeli",
          "Sayfa parçasını temsil etmeli",
          "Store bağlantısı olabilir",
          "İş mantığı içermemeli",
          "useMemo ile optimize edilmeli",
          "Error boundary kullanmalı"
        ]
      },
      "templates": {
        "description": "Layout ve şablonlar",
        "examples": [
          "MasterPage",
          "DashboardLayout",
          "AuthLayout",
          "AdminLayout"
        ],
        "rules": [
          "Layout ve şablonları ifade etmeli",
          "Organizmaları birleştirmeli",
          "Sayfa düzeyinde yapı oluşturmalı",
          "Responsive design kullanmalı",
          "Accessibility standartları uygulanmalı"
        ]
      },
      "pages": {
        "description": "Tam sayfalar",
        "examples": ["HomePage", "LoginPage", "DashboardPage", "ProfilePage"],
        "rules": [
          "Tam sayfa içeriğini temsil etmeli",
          "Template ve organismleri kullanmalı",
          "Route ile bağlantılı olmalı",
          "SEO optimizasyonu yapılmalı",
          "Performance monitoring kullanmalı"
        ]
      }
    },
    "file_structure": {
      "atoms": "src/components/atoms/",
      "molecules": "src/components/molecules/",
      "organisms": "src/components/organisms/",
      "templates": "src/components/templates/",
      "pages": "src/components/pages/"
    },
    "naming_conventions": {
      "components": "PascalCase (MyButton, UserCard)",
      "files": "PascalCase.tsx (MyButton.tsx, UserCard.tsx)",
      "folders": "kebab-case (user-profile, product-list)"
    },
    "performance_rules": [
      "React.memo kullanımı zorunlu",
      "useCallback ve useMemo optimizasyonu",
      "Gereksiz re-render'lar engellenmeli",
      "Arrow function kullanımı",
      "Explicit return tercih edilmeli"
    ]
  },
  "story_generation": {
    "automatic": true,
    "trigger": "component_created || component_updated",
    "story_format": ".stories.tsx",
    "required_variants": [
      "Default",
      "Primary",
      "Secondary",
      "Disabled",
      "Small",
      "Large",
      "HTMLPreview"
    ],
    "story_content": {
      "imports": "React ve component import",
      "default_export": "Component metadata ve argTypes",
      "variants": "Tüm varyantlar için story exports",
      "html_preview": "HTML çıktısı için özel hikaye"
    },
    "script_path": "multi-agent-v2/scripts/auto-story-generator.js"
  },
  "api_endpoints": {
    "execute_task": "/tasks/execute",
    "get_task_status": "/tasks/:id/status",
    "get_task_result": "/tasks/:id/result",
    "list_completed_tasks": "/tasks/completed",
    "read_task_context": "/shared-tasks/:id",
    "read_all_tasks": "/shared-tasks/*.context7.json",
    "read_main_context": "/main.context7.json",
    "list_pending_tasks": "/shared-tasks/pending",
    "update_task_status": "/shared-tasks/:id/status",
    "read_agent_log": "/shared-logs/developer-agent.log",
    "read_system_log": "/shared-logs/system.log",
    "read_task_reports": "/shared-logs/task-reports.md",
    "write_log": "/shared-log/write",
    "read_logs": "/shared-log/read",
    "get_task_logs": "/shared-log/task/:id",
    "generate_story": "/scripts/generate-story.js",
    "auto_story_generation": "/scripts/auto-story-generator.js",
    "performance_metrics": "/metrics/performance",
    "security_audit": "/audit/security"
  },
  "workflow": {
    "task_execution": {
      "task_discovery": {
        "scan_shared_tasks": true,
        "read_task_context": true,
        "read_main_context": true,
        "priority_sorting": true,
        "performance_analysis": true
      },
      "task_analysis": {
        "requirement_understanding": true,
        "complexity_assessment": true,
        "resource_planning": true,
        "context_awareness": true,
        "atomic_design_planning": true,
        "security_requirements": true
      },
      "implementation": {
        "code_generation": true,
        "file_creation": true,
        "code_review": true,
        "atomic_design_compliance": true,
        "performance_optimization": true,
        "security_validation": true
      },
      "story_generation": {
        "automatic_story_creation": true,
        "variant_generation": true,
        "html_preview_creation": true,
        "storybook_integration": true
      },
      "testing": {
        "unit_testing": true,
        "integration_testing": true,
        "validation": true,
        "story_testing": true,
        "performance_testing": true
      },
      "documentation": {
        "code_comments": true,
        "readme_generation": true,
        "api_documentation": true,
        "story_documentation": true
      },
      "task_completion": {
        "status_update": true,
        "result_logging": true,
        "context_cleanup": true,
        "story_verification": true,
        "performance_report": true
      }
    },
    "atomic_design_workflow": {
      "component_analysis": {
        "identify_level": true,
        "determine_complexity": true,
        "plan_structure": true,
        "performance_planning": true
      },
      "component_creation": {
        "follow_naming_conventions": true,
        "implement_props_interface": true,
        "use_material_ui": true,
        "add_proper_typing": true,
        "apply_performance_optimization": true,
        "implement_security_measures": true
      },
      "story_creation": {
        "generate_story_file": true,
        "create_all_variants": true,
        "add_html_preview": true,
        "update_storybook": true
      }
    },
    "shared_logging": {
      "task_execution_log": {
        "start_time": true,
        "end_time": true,
        "duration": true,
        "status": true,
        "details": true,
        "performance_metrics": true
      },
      "work_log": {
        "actions_performed": true,
        "files_created": true,
        "files_modified": true,
        "code_changes": true,
        "errors_encountered": true,
        "stories_generated": true,
        "performance_optimizations": true
      },
      "performance_log": {
        "execution_time": true,
        "memory_usage": true,
        "cpu_usage": true,
        "render_count": true,
        "bundle_size": true
      }
    },
    "quality_assurance": {
      "code_quality_check": true,
      "performance_optimization": true,
      "security_audit": true,
      "atomic_design_compliance": true,
      "story_quality_check": true,
      "type_safety_validation": true
    }
  },
  "development_tools": {
    "file_operations": {
      "create_file": true,
      "edit_file": true,
      "delete_file": true,
      "search_files": true
    },
    "code_analysis": {
      "syntax_check": true,
      "linting": true,
      "type_checking": true,
      "performance_analysis": true
    },
    "testing_framework": {
      "unit_tests": true,
      "integration_tests": true,
      "e2e_tests": true,
      "performance_tests": true
    },
    "story_generation_tools": {
      "generate_story": "node multi-agent-v2/scripts/generate-story.js",
      "auto_generate_all": "node multi-agent-v2/scripts/auto-story-generator.js --all",
      "generate_for_component": "node multi-agent-v2/scripts/auto-story-generator.js --component",
      "update_stories": "node multi-agent-v2/scripts/auto-story-generator.js --update"
    },
    "logging_system": {
      "agent_log_file": "/shared-logs/developer-agent.log",
      "system_log_file": "/shared-logs/system.log",
      "task_log_file": "/shared-logs/task-reports.md",
      "story_generation_log": "/shared-logs/story-generation.log",
      "performance_log": "/shared-logs/performance.log",
      "log_rotation": true,
      "log_compression": true
    }
  },
  "monitoring": {
    "metrics": [
      "tasks_completed",
      "average_execution_time",
      "code_quality_score",
      "bug_rate",
      "log_entries_written",
      "log_file_size",
      "components_created",
      "stories_generated",
      "atomic_design_compliance_rate",
      "performance_optimization_score",
      "security_compliance_rate"
    ],
    "alerts": [
      "execution_timeout",
      "high_bug_rate",
      "code_quality_degradation",
      "log_file_full",
      "logging_failure",
      "story_generation_failure",
      "atomic_design_violation",
      "performance_degradation",
      "security_violation"
    ]
  },
  "security": {
    "authentication": "jwt",
    "authorization": "role_based",
    "code_signing": true,
    "audit_logging": true,
    "input_validation": true,
    "xss_protection": true,
    "csrf_protection": true
  },
  "rules": {
    "atomic_design_compliance": "Her component atomic design kurallarına uygun olmalı",
    "story_requirement": "Her atomic design componenti için story dosyası zorunlu",
    "naming_conventions": "Component ve dosya isimleri belirlenen kurallara uygun olmalı",
    "material_ui_usage": "UI bileşenleri Material UI kullanmalı",
    "type_safety": "TypeScript strict mode kullanılmalı",
    "documentation": "Her component için uygun dokümantasyon yazılmalı",
    "performance_optimization": "React.memo, useCallback, useMemo kullanımı zorunlu",
    "security_compliance": "XSS, CSRF koruması ve input validation uygulanmalı"
  },
  "performance_optimization": {
    "caching_enabled": true,
    "memory_optimization": true,
    "execution_time_target": "30000ms",
    "concurrent_execution_limit": 5,
    "bundle_size_optimization": true
  }
}
