# EGKA AI AGENTS - Multi-Agent V2 Rules

## Multi-Agent V2 System Rules

### Agent Activation Rules

Her yeni chat başlangıcında aşağıdaki multi-agent V2 sistemi otomatik olarak devreye girer:

#### 1. Manager Agent V2 Activation

- **Trigger:** Kullanıcı herhangi bir komut girdiğinde
- **Action:** "Merhaba! Multi-Agent V2 Sistemine hoş geldiniz. Geliştirilmiş AI destekli geliştirme sistemi ile görevinizi analiz ediyorum."
- **Next Step:** Görevi analyst agent'a aktarır ve proje kapsamını belirler
- **Performance Monitoring:** Response time tracking ve memory optimization
- **Security Validation:** Input validation ve XSS protection

#### 2. Analyst Agent V2 Activation

- **Trigger:** Manager'dan gelen görev
- **Action:**
  - Auto increment ID ile task oluşturur (TASK-2025-1000 formatında)
  - Task context dosyası oluşturur: `multi-agent-v2/shared/tasks/TASK-XXXX-XXXX.context7.json`
  - Performance requirements ekler (React.memo, useCallback, useMemo)
  - Security requirements ekler (XSS protection, input validation)
  - Atomic design level belirler (atoms|molecules|organisms|templates|pages)
  - Storybook requirements ekler
- **Performance Optimization:** Task priority optimization ve resource allocation
- **Security Validation:** Security risk assessment

#### 3. Developer Agent V2 Activation

- **Trigger:** Frontend/UI ile ilgili task'lar
- **Action:**
  - Task context dosyasını okur
  - Atomic design kurallarına uygun component geliştirme
  - React.memo, useCallback, useMemo kullanımı zorunlu
  - TypeScript strict mode kullanımı
  - Material UI entegrasyonu
  - Otomatik story generation
  - Performance optimization
  - Security validation
  - Shared log'a yazar
  - Task durumunu günceller

## File Structure

```
multi-agent-v2/
├── agents/
│   ├── managerAgent.context7.json
│   ├── analystAgent.context7.json
│   └── developerAgent.context7.json
├── orchestrator/
│   ├── workflow.context7.json
│   └── context-injection-manager.js
├── shared/
│   ├── tasks/          # Task context dosyaları
│   └── logs/           # Shared log dosyaları
└── scripts/
    └── status.js
```

## Workflow V2

1. User Input → Manager Agent V2 (Greeting + Project Identification + Performance Monitoring)
2. Manager V2 → Analyst Agent V2 (Task Creation + Context File + Performance/Security Requirements)
3. Analyst V2 → Shared Tasks (TASK-XXXX-XXXX.context7.json with V2 requirements)
4. Developer Agent V2 → Reads Task → Executes with V2 rules → Logs → Updates Status

## Performance Requirements V2

### React Optimization Rules

- **React.memo:** Tüm component'lerde zorunlu
- **useCallback:** Prop olarak fonksiyon gönderiliyorsa kullanılmalı
- **useMemo:** Hesaplama maliyeti yüksek işlemlerde kullanılmalı
- **Arrow Function:** Tüm fonksiyonlar arrow function şeklinde tanımlanmalı
- **Explicit Return:** Mümkünse return kullanılarak açık şekilde değer dönülmeli

### TypeScript Strict Mode

- **Strict Mode:** Zorunlu kullanım
- **Interface Definitions:** Proper interface tanımlamaları
- **Type Safety:** Type safety sağlanmalı

## Security Requirements V2

### XSS Protection

- **Content-Security-Policy:** Uygulanmalı
- **Input Validation:** Tüm kullanıcı girdileri doğrulanmalı
- **Sanitization:** Hassas veri kontrolü ve sanitization

### Data Security

- **API Keys:** Frontend'de tutulmamalı
- **Local Storage:** Hassas veri saklanmamalı
- **Environment Variables:** .env dosyası üzerinden tanımlanmalı

## Atomic Design V2

### Component Levels

- **Atoms:** Button, Input, Icon, Typography, Avatar
- **Molecules:** FormField, Card, SearchBar, Navigation
- **Organisms:** Header, Sidebar, Footer, ProductList
- **Templates:** MasterPage, DashboardLayout, AuthLayout
- **Pages:** HomePage, LoginPage, DashboardPage

### Storybook Integration

- **Auto Story Generation:** Her component için story oluşturulmalı
- **Variant Support:** Variant'lar için story exports
- **HTML Preview:** HTML preview generation

## Logging V2

- Tüm aktiviteler `multi-agent-v2/shared/logs/` klasöründe loglanır
- Task durumları `multi-agent-v2/shared/tasks/` klasöründe takip edilir
- Performance metrics kaydedilir
- Security audit logları tutulur
- Her agent'ın kendi log dosyası vardır:
  - `manager-agent.log`
  - `analyst-agent.log`
  - `developer-agent.log`
  - `system.log`
  - `performance.log`
  - `security-audit.log`
  - `atomic-design.log`
  - `story-generation.log`

## V2 Commands

- `npm run status` - V2 Sistem durumu
- `npm run test` - V2 Test çalıştır
- `npm run performance` - Performance metrics
- `npm run security` - Security audit

## Auto Tasks Configuration

### Workflow Execution Engine

```javascript
// Auto task: Initialize workflow execution
{
  "task": "workflow_init",
  "trigger": "file_change",
  "pattern": "orchestrator/workflow-execution-engine.js",
  "action": "validate_workflow_structure",
  "description": "Validate workflow execution engine structure and dependencies"
}
```

### Agent Communication System

```javascript
// Auto task: Monitor agent communication
{
  "task": "agent_communication_monitor",
  "trigger": "file_change",
  "pattern": "orchestrator/agent-communication-system.js",
  "action": "validate_communication_protocols",
  "description": "Monitor and validate agent communication protocols"
}
```

### Task Assignment Manager

```javascript
// Auto task: Task assignment validation
{
  "task": "task_assignment_validation",
  "trigger": "file_change",
  "pattern": "orchestrator/task-assignment-manager.js",
  "action": "validate_task_assignment_logic",
  "description": "Validate task assignment logic and agent workload management"
}
```

### React Component Optimization

```javascript
// Auto task: React optimization validation
{
  "task": "react_optimization_check",
  "trigger": "file_change",
  "pattern": "**/*.tsx",
  "action": "validate_react_optimization",
  "rules": [
    "React.memo kullanımı zorunlu",
    "useCallback ile fonksiyon optimizasyonu",
    "useMemo ile hesaplama optimizasyonu",
    "Arrow function kullanımı",
    "Explicit return tercih edilmeli"
  ],
  "description": "Validate React component optimization rules"
}
```

### TypeScript Strict Mode

```javascript
// Auto task: TypeScript validation
{
  "task": "typescript_validation",
  "trigger": "file_change",
  "pattern": "**/*.ts",
  "action": "validate_typescript_strict",
  "rules": [
    "Strict mode kullanımı",
    "Proper interface tanımlamaları",
    "Type safety sağlanmalı"
  ],
  "description": "Validate TypeScript strict mode compliance"
}
```

### XSS Protection

```javascript
// Auto task: XSS protection validation
{
  "task": "xss_protection_check",
  "trigger": "file_change",
  "pattern": "**/*.{js,ts,tsx}",
  "action": "validate_xss_protection",
  "rules": [
    "Content-Security-Policy uygulanmalı",
    "Input validation zorunlu",
    "XSS pattern kontrolü"
  ],
  "description": "Validate XSS protection implementation"
}
```

### Atomic Design Validation

```javascript
// Auto task: Atomic design validation
{
  "task": "atomic_design_validation",
  "trigger": "file_change",
  "pattern": "**/components/**/*.{tsx,ts}",
  "action": "validate_atomic_design",
  "levels": {
    "atoms": ["Button", "Input", "Icon", "Typography", "Avatar"],
    "molecules": ["FormField", "Card", "SearchBar", "Navigation"],
    "organisms": ["Header", "Sidebar", "Footer", "ProductList"],
    "templates": ["MasterPage", "DashboardLayout", "AuthLayout"],
    "pages": ["HomePage", "LoginPage", "DashboardPage"]
  },
  "description": "Validate atomic design structure compliance"
}
```

### Storybook Generation

```javascript
// Auto task: Storybook story generation
{
  "task": "storybook_generation",
  "trigger": "file_change",
  "pattern": "**/components/**/*.tsx",
  "action": "generate_storybook_stories",
  "rules": [
    "Her component için story oluşturulmalı",
    "Variant'lar için story exports",
    "HTML preview generation"
  ],
  "description": "Auto-generate Storybook stories for components"
}
```

### Unit Test Generation

```javascript
// Auto task: Unit test generation
{
  "task": "unit_test_generation",
  "trigger": "file_change",
  "pattern": "**/components/**/*.tsx",
  "action": "generate_unit_tests",
  "rules": [
    "Component test coverage",
    "Props validation tests",
    "Event handling tests"
  ],
  "description": "Auto-generate unit tests for components"
}
```

### ESLint Validation

```javascript
// Auto task: ESLint validation
{
  "task": "eslint_validation",
  "trigger": "file_change",
  "pattern": "**/*.{js,ts,tsx}",
  "action": "validate_eslint_rules",
  "rules": [
    "Modern JavaScript/TypeScript kullanımı",
    "Code formatting standards",
    "Best practices compliance"
  ],
  "description": "Validate ESLint rules compliance"
}
```

### Prettier Formatting

```javascript
// Auto task: Prettier formatting
{
  "task": "prettier_formatting",
  "trigger": "file_change",
  "pattern": "**/*.{js,ts,tsx,json}",
  "action": "format_with_prettier",
  "description": "Auto-format code with Prettier"
}
```

## Execution Priority

```javascript
// Auto execution priority rules
{
  "priority_order": [
    "security_validation",
    "performance_optimization",
    "code_quality_validation",
    "atomic_design_validation",
    "testing_generation",
    "documentation_update"
  ],
  "parallel_execution": [
    "eslint_validation",
    "prettier_formatting",
    "typescript_validation"
  ],
  "sequential_execution": [
    "workflow_validation",
    "agent_communication_validation",
    "task_assignment_validation"
  ]
}
```

## Error Handling

```javascript
// Auto error handling rules
{
  "error_severity": {
    "critical": ["security_violation", "workflow_failure"],
    "high": ["performance_degradation", "agent_failure"],
    "medium": ["code_quality_issues", "test_failures"],
    "low": ["formatting_issues", "documentation_updates"]
  },
  "retry_policy": {
    "max_retries": 3,
    "retry_delay": 1000,
    "exponential_backoff": true
  },
  "notification_rules": {
    "critical": "immediate_notification",
    "high": "notification_within_5_minutes",
    "medium": "notification_within_30_minutes",
    "low": "daily_summary"
  }
}
```

## V2 Communication Rules

- Ajanlar, her zaman Türkçe cevaplar vermeli
- Kod yorumları Türkçe olmalı
- Değişken ve fonksiyon isimleri İngilizce olmalı
- Dosya isimleri İngilizce olmalı

---

**Bu dosya V2 otomatik olarak oluşturulmuştur ve "always" seçili olmalıdır.**
description:
globs:
alwaysApply: false

---
