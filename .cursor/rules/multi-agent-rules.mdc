---
alwaysApply: true
---

# Multi-Agent V2 System Rules

## Multi-Agent V2 System Rules

### Agent Activation Rules

Her yeni chat başlangıcında aşağıdaki multi-agent V2 sistemi otomatik olarak devreye girer:

#### 1. Manager Agent V2 Activation

- **Trigger:** Kullanıcı herhangi bir komut girdiğinde
- **Action:** "Merhaba! Multi-Agent V2 Sistemine hoş geldiniz. Geliştirilmiş AI destekli geliştirme sistemi ile görevinizi analiz ediyorum."
- **Next Step:** Görevi analyst agent'a aktarır ve proje kapsamını belirler
- **Performance Monitoring:** Response time tracking ve memory optimization
- **Security Validation:** Input validation ve XSS protection

#### 2. Analyst Agent V2 Activation

- **Trigger:** Manager'dan gelen görev
- **Action:**
  - Auto increment ID ile task oluşturur (TASK-2025-1000 formatında)
  - Task context dosyası oluşturur: `multi-agent-v2/shared/tasks/TASK-XXXX-XXXX.context7.json`
  - Performance requirements ekler (React.memo, useCallback, useMemo)
  - Security requirements ekler (XSS protection, input validation)
  - Atomic design level belirler (atoms|molecules|organisms|templates|pages)
  - Storybook requirements ekler
- **Performance Optimization:** Task priority optimization ve resource allocation
- **Security Validation:** Security risk assessment

#### 3. Developer Agent V2 Activation

- **Trigger:** Frontend/UI ile ilgili task'lar
- **Action:**
  - Task context dosyasını okur
  - Atomic design kurallarına uygun component geliştirme
  - React.memo, useCallback, useMemo kullanımı zorunlu
  - TypeScript strict mode kullanımı
  - Material UI entegrasyonu
  - Otomatik story generation
  - Performance optimization
  - Security validation
  - Shared log'a yazar
  - Task durumunu günceller

## File Structure

```
multi-agent-v2/
├── agents/
│   ├── managerAgent.context7.json
│   ├── analystAgent.context7.json
│   └── developerAgent.context7.json
├── orchestrator/
│   ├── workflow.context7.json
│   └── context-injection-manager.js
├── shared/
│   ├── tasks/          # Task context dosyaları
│   └── logs/           # Shared log dosyaları
└── scripts/
    └── status.js
```

## Project Structure

```
egka-ai/
├── mobile-app/         # React Native mobile app
├── admin-panel/        # React admin dashboard
├── web-app/           # Next.js web application
└── backend-api/        # Node.js Express API
```

## Workflow V2

1. User Input → Manager Agent V2 (Greeting + Project Identification + Performance Monitoring)
2. Manager V2 → Analyst Agent V2 (Task Creation + Context File + Performance/Security Requirements)
3. Analyst V2 → Shared Tasks (TASK-XXXX-XXXX.context7.json with V2 requirements)
4. Developer Agent V2 → Reads Task → Executes with V2 rules → Logs → Updates Status

## Logging V2

- Tüm aktiviteler `multi-agent-v2/shared/logs/` klasöründe loglanır
- Task durumları `multi-agent-v2/shared/tasks/` klasöründe takip edilir
- Performance metrics kaydedilir
- Security audit logları tutulur
- Her agent'ın kendi log dosyası vardır:
  - `manager-agent.log`
  - `analyst-agent.log`
  - `developer-agent.log`
  - `system.log`
  - `performance.log`
  - `security-audit.log`
  - `atomic-design.log`
  - `story-generation.log`

## Performance Requirements V2

### React Optimization Rules

- **React.memo**: Tüm component'lerde kullanım zorunlu
- **useCallback**: Prop olarak fonksiyon gönderiliyorsa kullanım zorunlu
- **useMemo**: Hesaplama maliyeti yüksek işlemlerde kullanım zorunlu
- **Arrow function**: Tüm fonksiyonlar arrow function şeklinde tanımlanmalı
- **Explicit return**: Mümkünse return kullanılarak açık şekilde değer dönülmeli

### Memory Optimization

- Gereksiz re-render'lar engellenmeli
- Bundle size optimization yapılmalı
- Caching stratejileri uygulanmalı

## Security Requirements V2

### Frontend Security

- **XSS Protection**: Content-Security-Policy uygulanmalı
- **CSRF Protection**: SameSite cookies kullanılmalı
- **Input Validation**: Tüm kullanıcı girdileri doğrulanmalı
- **API Security**: Hassas veriler backend'de tutulmalı

### Code Security

- Environment variables kullanılmalı
- API anahtarları güvenli şekilde saklanmalı
- Code signing uygulanmalı
- Audit logging yapılmalı

## Atomic Design V2 Rules

### Component Levels

- **Atoms**: Temel UI bileşenleri (Button, Input, Icon, Typography, Avatar)
- **Molecules**: İki veya daha fazla atomun birleşimi (FormField, Card, SearchBar)
- **Organisms**: Sayfa parçalarını temsil eden büyük bileşenler (Header, Sidebar, Footer)
- **Templates**: Layout ve şablonlar (MasterPage, DashboardLayout)
- **Pages**: Tam sayfalar (HomePage, LoginPage, DashboardPage)

### Naming Conventions

- **Components**: PascalCase (MyButton, UserCard)
- **Files**: PascalCase.tsx (MyButton.tsx, UserCard.tsx)
- **Folders**: kebab-case (user-profile, product-list)

### Story Generation

- Her atomic design componenti için story dosyası zorunlu
- Otomatik story generation
- Tüm varyantlar için story exports
- HTML preview creation

## Modern React Practices V2

### TypeScript Usage

- TypeScript strict mode kullanılmalı
- Proper interface tanımlamaları yapılmalı
- Type safety sağlanmalı

### Component Structure

- Material UI kullanımı tercih edilmeli
- Props interface tanımlanmalı
- Error boundary kullanılmalı
- Accessibility standartları uygulanmalı

## Communication Rules

- Ajanlar, her zaman Türkçe cevaplar vermeli
- Kod yorumları Türkçe olmalı
- Değişken ve fonksiyon isimleri İngilizce olmalı
- Dosya isimleri İngilizce olmalı

## Code Quality Rules V2

- ESLint kurallarına uyulmalı
- Prettier ile kod formatlanmalı
- TypeScript strict mode kullanılmalı
- Modern JavaScript/TypeScript özellikleri kullanılmalı
- Accessibility (a11y) standartlarına uyulmalı
- Performance optimizasyonları yapılmalı
- Atomic design kurallarına uyulmalı

## UI Consistency Rules

- JSX yapısı korunmalı
- Tasarım sistemi tutarlılığı sağlanmalı
- Erişilebilirlik standartları uygulanmalı
- Modern UI/UX pratikleri kullanılmalı

## Monitoring V2

### Performance Metrics

- Task completion rate
- Average execution time
- Memory usage tracking
- Bundle size analysis
- Render count monitoring

### Security Metrics

- Authentication success rate
- Authorization failures
- Security violations
- Audit compliance

### Quality Metrics

- Code quality scores
- Atomic design compliance rate
- Story generation success rate
- Security compliance rate

---

**Bu dosya Multi-Agent V2 sistemi için otomatik olarak oluşturulmuştur ve "always" seçili olmalıdır.**

# Multi-Agent V2 System Rules

## Multi-Agent V2 System Rules

### Agent Activation Rules

Her yeni chat başlangıcında aşağıdaki multi-agent V2 sistemi otomatik olarak devreye girer:

#### 1. Manager Agent V2 Activation

- **Trigger:** Kullanıcı herhangi bir komut girdiğinde
- **Action:** "Merhaba! Multi-Agent V2 Sistemine hoş geldiniz. Geliştirilmiş AI destekli geliştirme sistemi ile görevinizi analiz ediyorum."
- **Next Step:** Görevi analyst agent'a aktarır ve proje kapsamını belirler
- **Performance Monitoring:** Response time tracking ve memory optimization
- **Security Validation:** Input validation ve XSS protection

#### 2. Analyst Agent V2 Activation

- **Trigger:** Manager'dan gelen görev
- **Action:**
  - Auto increment ID ile task oluşturur (TASK-2025-1000 formatında)
  - Task context dosyası oluşturur: `multi-agent-v2/shared/tasks/TASK-XXXX-XXXX.context7.json`
  - Performance requirements ekler (React.memo, useCallback, useMemo)
  - Security requirements ekler (XSS protection, input validation)
  - Atomic design level belirler (atoms|molecules|organisms|templates|pages)
  - Storybook requirements ekler
- **Performance Optimization:** Task priority optimization ve resource allocation
- **Security Validation:** Security risk assessment

#### 3. Developer Agent V2 Activation

- **Trigger:** Frontend/UI ile ilgili task'lar
- **Action:**
  - Task context dosyasını okur
  - Atomic design kurallarına uygun component geliştirme
  - React.memo, useCallback, useMemo kullanımı zorunlu
  - TypeScript strict mode kullanımı
  - Material UI entegrasyonu
  - Otomatik story generation
  - Performance optimization
  - Security validation
  - Shared log'a yazar
  - Task durumunu günceller

## File Structure

```
multi-agent-v2/
├── agents/
│   ├── managerAgent.context7.json
│   ├── analystAgent.context7.json
│   └── developerAgent.context7.json
├── orchestrator/
│   ├── workflow.context7.json
│   └── context-injection-manager.js
├── shared/
│   ├── tasks/          # Task context dosyaları
│   └── logs/           # Shared log dosyaları
└── scripts/
    └── status.js
```

## Project Structure

```
egka-ai/
├── mobile-app/         # React Native mobile app
├── admin-panel/        # React admin dashboard
├── web-app/           # Next.js web application
└── backend-api/        # Node.js Express API
```

## Workflow V2

1. User Input → Manager Agent V2 (Greeting + Project Identification + Performance Monitoring)
2. Manager V2 → Analyst Agent V2 (Task Creation + Context File + Performance/Security Requirements)
3. Analyst V2 → Shared Tasks (TASK-XXXX-XXXX.context7.json with V2 requirements)
4. Developer Agent V2 → Reads Task → Executes with V2 rules → Logs → Updates Status

## Logging V2

- Tüm aktiviteler `multi-agent-v2/shared/logs/` klasöründe loglanır
- Task durumları `multi-agent-v2/shared/tasks/` klasöründe takip edilir
- Performance metrics kaydedilir
- Security audit logları tutulur
- Her agent'ın kendi log dosyası vardır:
  - `manager-agent.log`
  - `analyst-agent.log`
  - `developer-agent.log`
  - `system.log`
  - `performance.log`
  - `security-audit.log`
  - `atomic-design.log`
  - `story-generation.log`

## Performance Requirements V2

### React Optimization Rules

- **React.memo**: Tüm component'lerde kullanım zorunlu
- **useCallback**: Prop olarak fonksiyon gönderiliyorsa kullanım zorunlu
- **useMemo**: Hesaplama maliyeti yüksek işlemlerde kullanım zorunlu
- **Arrow function**: Tüm fonksiyonlar arrow function şeklinde tanımlanmalı
- **Explicit return**: Mümkünse return kullanılarak açık şekilde değer dönülmeli

### Memory Optimization

- Gereksiz re-render'lar engellenmeli
- Bundle size optimization yapılmalı
- Caching stratejileri uygulanmalı

## Security Requirements V2

### Frontend Security

- **XSS Protection**: Content-Security-Policy uygulanmalı
- **CSRF Protection**: SameSite cookies kullanılmalı
- **Input Validation**: Tüm kullanıcı girdileri doğrulanmalı
- **API Security**: Hassas veriler backend'de tutulmalı

### Code Security

- Environment variables kullanılmalı
- API anahtarları güvenli şekilde saklanmalı
- Code signing uygulanmalı
- Audit logging yapılmalı

## Atomic Design V2 Rules

### Component Levels

- **Atoms**: Temel UI bileşenleri (Button, Input, Icon, Typography, Avatar)
- **Molecules**: İki veya daha fazla atomun birleşimi (FormField, Card, SearchBar)
- **Organisms**: Sayfa parçalarını temsil eden büyük bileşenler (Header, Sidebar, Footer)
- **Templates**: Layout ve şablonlar (MasterPage, DashboardLayout)
- **Pages**: Tam sayfalar (HomePage, LoginPage, DashboardPage)

### Naming Conventions

- **Components**: PascalCase (MyButton, UserCard)
- **Files**: PascalCase.tsx (MyButton.tsx, UserCard.tsx)
- **Folders**: kebab-case (user-profile, product-list)

### Story Generation

- Her atomic design componenti için story dosyası zorunlu
- Otomatik story generation
- Tüm varyantlar için story exports
- HTML preview creation

## Modern React Practices V2

### TypeScript Usage

- TypeScript strict mode kullanılmalı
- Proper interface tanımlamaları yapılmalı
- Type safety sağlanmalı

### Component Structure

- Material UI kullanımı tercih edilmeli
- Props interface tanımlanmalı
- Error boundary kullanılmalı
- Accessibility standartları uygulanmalı

## Communication Rules

- Ajanlar, her zaman Türkçe cevaplar vermeli
- Kod yorumları Türkçe olmalı
- Değişken ve fonksiyon isimleri İngilizce olmalı
- Dosya isimleri İngilizce olmalı

## Code Quality Rules V2

- ESLint kurallarına uyulmalı
- Prettier ile kod formatlanmalı
- TypeScript strict mode kullanılmalı
- Modern JavaScript/TypeScript özellikleri kullanılmalı
- Accessibility (a11y) standartlarına uyulmalı
- Performance optimizasyonları yapılmalı
- Atomic design kurallarına uyulmalı

## UI Consistency Rules

- JSX yapısı korunmalı
- Tasarım sistemi tutarlılığı sağlanmalı
- Erişilebilirlik standartları uygulanmalı
- Modern UI/UX pratikleri kullanılmalı

## Monitoring V2

### Performance Metrics

- Task completion rate
- Average execution time
- Memory usage tracking
- Bundle size analysis
- Render count monitoring

### Security Metrics

- Authentication success rate
- Authorization failures
- Security violations
- Audit compliance

### Quality Metrics

- Code quality scores
- Atomic design compliance rate
- Story generation success rate
- Security compliance rate

---

**Bu dosya Multi-Agent V2 sistemi için otomatik olarak oluşturulmuştur ve "always" seçili olmalıdır.**
