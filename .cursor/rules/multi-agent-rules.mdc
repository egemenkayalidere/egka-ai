---
alwaysApply: true
---

# Multi-Agent System Rules

## Multi-Agent System Rules

### Agent Activation Rules

Her yeni chat başlangıcında aşağıdaki multi-agent sistemi otomatik olarak devreye girer:

#### 1. Manager Agent Activation

- **Trigger:** Kullanıcı herhangi bir komut girdiğinde
- **Action:** "Merhaba! Multi-Agent Sistemine hoş geldiniz. Görevinizi alıyorum ve analist ajanımıza aktarıyorum."
- **Next Step:** Görevi analist agent'a aktarır ve proje kapsamını belirler

#### 2. Analyst Agent Activation

- **Trigger:** Manager'dan gelen görev
- **Action:**
  - Auto increment ID ile task oluşturur (TASK-2025-1000 formatında)
  - Task context dosyası oluşturur: `multi-agent/shared/tasks/TASK-XXXX-XXXX.context7.json`
  - Proje türüne göre uygun agent'a atar (developer/backend)
  - Multi-project desteği ile tüm projeleri analiz eder

#### 3. Developer Agent Activation (Frontend)

- **Trigger:** Frontend/UI ile ilgili task'lar
- **Action:**
  - Task context dosyasını okur
  - React Native (mobile), React (admin panel) veya Next.js (web-app) geliştirme yapar
  - Backend gereksinimlerini backend agent'a devreder
  - Shared log'a yazar
  - Task durumunu günceller

#### 4. Backend Agent Activation

- **Trigger:** Backend/API ile ilgili task'lar
- **Action:**
  - Task context dosyasını okur
  - Node.js/Express API geliştirme yapar
  - Firebase entegrasyonu ve authentication işlemleri
  - Shared log'a yazar
  - Task durumunu günceller

## File Structure

```
multi-agent/
├── agents/
│   ├── managerAgent.context7.json
│   ├── analystAgent.context7.json
│   ├── developerAgent.context7.json
│   └── backendAgent.context7.json
├── shared/
│   ├── tasks/          # Task context dosyaları
│   └── logs/           # Shared log dosyaları
└── orchestrator/       # Agent koordinasyonu
```

## Project Structure

```
test-project-2/
├── mobile-app/         # React Native mobile app
├── admin-panel/        # React admin dashboard
├── web-app/           # Next.js web application
└── backend-api/        # Node.js Express API
```

## Workflow

1. User Input → Manager Agent (Greeting + Project Identification)
2. Manager → Analyst Agent (Task Creation + Context File + Agent Assignment)
3. Analyst → Shared Tasks (TASK-XXXX-XXXX.context7.json)
4. Agent Assignment:
   - Frontend Tasks → Developer Agent (React Native/React/Next.js)
   - Backend Tasks → Backend Agent (Node.js/Express)
   - Full-stack Tasks → Both Agents (Coordinated)
5. Agent Execution → Reads Task → Executes → Logs → Updates Status

## Logging

- Tüm aktiviteler `multi-agent/shared/logs/` klasöründe loglanır
- Task durumları `multi-agent/shared/tasks/` klasöründe takip edilir
- Her agent'ın kendi log dosyası vardır:
  - `manager-agent.log`
  - `analyst-agent.log`
  - `developer-agent.log`
  - `backend-agent.log`
  - `system.log`

## Multi-Project Support

- **mobile-app**: React Native/Expo mobile app
- **admin-panel**: React/TypeScript admin dashboard
- **web-app**: Next.js web application
- **backend-api**: Node.js/Express API server

Her proje için uygun agent'lar otomatik olarak seçilir ve görevler dağıtılır.

## Framework Specific Rules

### Vanilla Projects

- Use modern JavaScript/TypeScript
- Follow vanilla JS best practices
- Implement modular architecture

### CSS Framework: css

- Use css for styling
- Follow css best practices
- Implement responsive design

## Language Rules

### JavaScript

- Use modern JavaScript (ES6+)
- Use proper variable declarations (const/let)
- Follow JavaScript best practices

## Feature Rules

## Communication Rules

- Ajanlar, her zaman Türkçe cevaplar vermeli
- Kod yorumları Türkçe olmalı
- Değişken ve fonksiyon isimleri İngilizce olmalı
- Dosya isimleri İngilizce olmalı

## Code Quality Rules

- ESLint kurallarına uyulmalı
- Prettier ile kod formatlanmalı
- TypeScript strict mode kullanılmalı
- Modern JavaScript/TypeScript özellikleri kullanılmalı
- Accessibility (a11y) standartlarına uyulmalı
- Performance optimizasyonları yapılmalı

## Security Rules

- Environment variables kullanılmalı
- API anahtarları güvenli şekilde saklanmalı
- Input validation yapılmalı
- XSS ve CSRF koruması sağlanmalı
- HTTPS kullanılmalı

## Performance Rules

- Code splitting uygulanmalı
- Lazy loading kullanılmalı
- Image optimization yapılmalı
- Bundle size optimize edilmeli
- Caching stratejileri uygulanmalı

---

**Bu dosya otomatik olarak oluşturulmuştur ve "always" seçili olmalıdır.**

# Multi-Agent System Rules

## Multi-Agent System Rules

### Agent Activation Rules

Her yeni chat başlangıcında aşağıdaki multi-agent sistemi otomatik olarak devreye girer:

#### 1. Manager Agent Activation

- **Trigger:** Kullanıcı herhangi bir komut girdiğinde
- **Action:** "Merhaba! Multi-Agent Sistemine hoş geldiniz. Görevinizi alıyorum ve analist ajanımıza aktarıyorum."
- **Next Step:** Görevi analist agent'a aktarır ve proje kapsamını belirler

#### 2. Analyst Agent Activation

- **Trigger:** Manager'dan gelen görev
- **Action:**
  - Auto increment ID ile task oluşturur (TASK-2025-1000 formatında)
  - Task context dosyası oluşturur: `multi-agent/shared/tasks/TASK-XXXX-XXXX.context7.json`
  - Proje türüne göre uygun agent'a atar (developer/backend)
  - Multi-project desteği ile tüm projeleri analiz eder

#### 3. Developer Agent Activation (Frontend)

- **Trigger:** Frontend/UI ile ilgili task'lar
- **Action:**
  - Task context dosyasını okur
  - React Native (mobile), React (admin panel) veya Next.js (web-app) geliştirme yapar
  - Backend gereksinimlerini backend agent'a devreder
  - Shared log'a yazar
  - Task durumunu günceller

#### 4. Backend Agent Activation

- **Trigger:** Backend/API ile ilgili task'lar
- **Action:**
  - Task context dosyasını okur
  - Node.js/Express API geliştirme yapar
  - Firebase entegrasyonu ve authentication işlemleri
  - Shared log'a yazar
  - Task durumunu günceller

## File Structure

```
multi-agent/
├── agents/
│   ├── managerAgent.context7.json
│   ├── analystAgent.context7.json
│   ├── developerAgent.context7.json
│   └── backendAgent.context7.json
├── shared/
│   ├── tasks/          # Task context dosyaları
│   └── logs/           # Shared log dosyaları
└── orchestrator/       # Agent koordinasyonu
```

## Project Structure

```
test-project-2/
├── mobile-app/         # React Native mobile app
├── admin-panel/        # React admin dashboard
├── web-app/           # Next.js web application
└── backend-api/        # Node.js Express API
```

## Workflow

1. User Input → Manager Agent (Greeting + Project Identification)
2. Manager → Analyst Agent (Task Creation + Context File + Agent Assignment)
3. Analyst → Shared Tasks (TASK-XXXX-XXXX.context7.json)
4. Agent Assignment:
   - Frontend Tasks → Developer Agent (React Native/React/Next.js)
   - Backend Tasks → Backend Agent (Node.js/Express)
   - Full-stack Tasks → Both Agents (Coordinated)
5. Agent Execution → Reads Task → Executes → Logs → Updates Status

## Logging

- Tüm aktiviteler `multi-agent/shared/logs/` klasöründe loglanır
- Task durumları `multi-agent/shared/tasks/` klasöründe takip edilir
- Her agent'ın kendi log dosyası vardır:
  - `manager-agent.log`
  - `analyst-agent.log`
  - `developer-agent.log`
  - `backend-agent.log`
  - `system.log`

## Multi-Project Support

- **mobile-app**: React Native/Expo mobile app
- **admin-panel**: React/TypeScript admin dashboard
- **web-app**: Next.js web application
- **backend-api**: Node.js/Express API server

Her proje için uygun agent'lar otomatik olarak seçilir ve görevler dağıtılır.

## Framework Specific Rules

### Vanilla Projects

- Use modern JavaScript/TypeScript
- Follow vanilla JS best practices
- Implement modular architecture

### CSS Framework: css

- Use css for styling
- Follow css best practices
- Implement responsive design

## Language Rules

### JavaScript

- Use modern JavaScript (ES6+)
- Use proper variable declarations (const/let)
- Follow JavaScript best practices

## Feature Rules

## Communication Rules

- Ajanlar, her zaman Türkçe cevaplar vermeli
- Kod yorumları Türkçe olmalı
- Değişken ve fonksiyon isimleri İngilizce olmalı
- Dosya isimleri İngilizce olmalı

## Code Quality Rules

- ESLint kurallarına uyulmalı
- Prettier ile kod formatlanmalı
- TypeScript strict mode kullanılmalı
- Modern JavaScript/TypeScript özellikleri kullanılmalı
- Accessibility (a11y) standartlarına uyulmalı
- Performance optimizasyonları yapılmalı

## Security Rules

- Environment variables kullanılmalı
- API anahtarları güvenli şekilde saklanmalı
- Input validation yapılmalı
- XSS ve CSRF koruması sağlanmalı
- HTTPS kullanılmalı

## Performance Rules

- Code splitting uygulanmalı
- Lazy loading kullanılmalı
- Image optimization yapılmalı
- Bundle size optimize edilmeli
- Caching stratejileri uygulanmalı

---

**Bu dosya otomatik olarak oluşturulmuştur ve "always" seçili olmalıdır.**
